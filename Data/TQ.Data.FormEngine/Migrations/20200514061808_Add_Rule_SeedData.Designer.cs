// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TQ.Data.FormEngine;

namespace TQ.Data.FormEngine.Migrations
{
    [DbContext(typeof(FormsEngineContext))]
    [Migration("20200514061808_Add_Rule_SeedData")]
    partial class Add_Rule_SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.AnswerGuide", b =>
                {
                    b.Property<Guid>("AnswerGuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnswerGuideNo")
                        .HasColumnType("int");

                    b.Property<int>("AnswerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CopyFromFieldNo")
                        .HasColumnType("int");

                    b.Property<int?>("CopyFromQSNo")
                        .HasColumnType("int");

                    b.Property<string>("ErrLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IsDefault")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Max")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Min")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerGuideId");

                    b.HasIndex("AnswerTypeId");

                    b.HasIndex("FieldId");

                    b.ToTable("AnswerGuides","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.AnswerType", b =>
                {
                    b.Property<int>("AnswerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerTypeId");

                    b.ToTable("AnswerTypes","forms");

                    b.HasData(
                        new
                        {
                            AnswerTypeId = 1,
                            AnswerTypes = "Range"
                        },
                        new
                        {
                            AnswerTypeId = 2,
                            AnswerTypes = "Length"
                        },
                        new
                        {
                            AnswerTypeId = 3,
                            AnswerTypes = "regex"
                        },
                        new
                        {
                            AnswerTypeId = 4,
                            AnswerTypes = "RegexBE"
                        },
                        new
                        {
                            AnswerTypeId = 5,
                            AnswerTypes = "Multiple"
                        },
                        new
                        {
                            AnswerTypeId = 6,
                            AnswerTypes = "Value"
                        },
                        new
                        {
                            AnswerTypeId = 7,
                            AnswerTypes = "API"
                        },
                        new
                        {
                            AnswerTypeId = 8,
                            AnswerTypes = "Date"
                        },
                        new
                        {
                            AnswerTypeId = 9,
                            AnswerTypes = "copyFrom"
                        });
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Constraint", b =>
                {
                    b.Property<int>("ConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Constraints")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConstraintId");

                    b.ToTable("Constraints","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Display", b =>
                {
                    b.Property<int>("DisplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Displays")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DisplayId");

                    b.ToTable("Displays","forms");

                    b.HasData(
                        new
                        {
                            DisplayId = 1,
                            Displays = "Hide"
                        },
                        new
                        {
                            DisplayId = 2,
                            Displays = "Optional"
                        },
                        new
                        {
                            DisplayId = 3,
                            Displays = "Required"
                        });
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Field", b =>
                {
                    b.Property<Guid>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnswerRuleCount")
                        .HasColumnType("int");

                    b.Property<int?>("AnswerRuleId")
                        .HasColumnType("int");

                    b.Property<int?>("ConstraintRuleCount")
                        .HasColumnType("int");

                    b.Property<int?>("ConstraintRuleId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayConstraintId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayId")
                        .HasColumnType("int");

                    b.Property<int>("FieldNo")
                        .HasColumnType("int");

                    b.Property<int?>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("FieldVersion")
                        .HasColumnType("decimal(18,1)");

                    b.Property<string>("Helptext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToBeRedacted")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldId");

                    b.HasIndex("AnswerRuleId");

                    b.HasIndex("ConstraintRuleId");

                    b.HasIndex("DisplayConstraintId");

                    b.HasIndex("DisplayId");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("Fields","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.FieldAggregation", b =>
                {
                    b.Property<Guid>("FieldAggregationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregatedFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("FieldAggregationId");

                    b.HasIndex("FieldId");

                    b.HasIndex("FunctionId");

                    b.ToTable("FieldAggregations","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.FieldConstraint", b =>
                {
                    b.Property<Guid>("FieldConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DependantAnswerGuideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DependantAnswerGuideNo")
                        .HasColumnType("int");

                    b.Property<int?>("DependantAnswerQSNo")
                        .HasColumnType("int");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SectionNo")
                        .HasColumnType("int");

                    b.HasKey("FieldConstraintId");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldConstraints","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.FieldType", b =>
                {
                    b.Property<int>("FieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FieldTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldTypeId");

                    b.ToTable("FieldTypes","forms");

                    b.HasData(
                        new
                        {
                            FieldTypeId = 1,
                            FieldTypes = "NUMBER"
                        },
                        new
                        {
                            FieldTypeId = 2,
                            FieldTypes = "DROPDOWN"
                        },
                        new
                        {
                            FieldTypeId = 3,
                            FieldTypes = "DATE"
                        },
                        new
                        {
                            FieldTypeId = 4,
                            FieldTypes = "DROPDOWN"
                        },
                        new
                        {
                            FieldTypeId = 5,
                            FieldTypes = "BUTTON"
                        },
                        new
                        {
                            FieldTypeId = 6,
                            FieldTypes = "ActionInput"
                        },
                        new
                        {
                            FieldTypeId = 7,
                            FieldTypes = "ActionAddress"
                        },
                        new
                        {
                            FieldTypeId = 8,
                            FieldTypes = "ActionTable"
                        },
                        new
                        {
                            FieldTypeId = 9,
                            FieldTypes = "Aggregation"
                        },
                        new
                        {
                            FieldTypeId = 10,
                            FieldTypes = "TEXT"
                        },
                        new
                        {
                            FieldTypeId = 11,
                            FieldTypes = "NUMBERSELECTOR"
                        },
                        new
                        {
                            FieldTypeId = 12,
                            FieldTypes = "Notification"
                        },
                        new
                        {
                            FieldTypeId = 13,
                            FieldTypes = "CHECKBOX"
                        });
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Function", b =>
                {
                    b.Property<int>("FunctionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Functions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionsId");

                    b.ToTable("Functions","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.QS", b =>
                {
                    b.Property<Guid>("QSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Helptext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QSName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QSNo")
                        .HasColumnType("int");

                    b.Property<int?>("QSTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("QSVersion")
                        .HasColumnType("decimal(18,1)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TaxonomyLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tenant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarningMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QSId");

                    b.HasIndex("QSTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("QS","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.QSCollectionMapping", b =>
                {
                    b.Property<Guid>("QSCollectionMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QSCollectionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QSNo")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("QSCollectionMappingId");

                    b.HasIndex("QSCollectionTypeId");

                    b.HasIndex("QSId");

                    b.ToTable("QSCollectionMappings","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.QSCollectionType", b =>
                {
                    b.Property<Guid>("QSCollectionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationTypeRefNo")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Helptext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("QSCollectionVersion")
                        .HasColumnType("float");

                    b.Property<string>("Tenant")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QSCollectionTypeId");

                    b.ToTable("QSCollectionTypes","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.QSSectionMapping", b =>
                {
                    b.Property<Guid>("QSSectionMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("QSSectionMappingId");

                    b.HasIndex("QSId");

                    b.HasIndex("SectionId");

                    b.ToTable("QSSectionMappings","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.QSType", b =>
                {
                    b.Property<int>("QSTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QSTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QSTypeId");

                    b.ToTable("QSTypes","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Rule", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleId");

                    b.ToTable("Rules","forms");

                    b.HasData(
                        new
                        {
                            RuleId = 1,
                            Rules = "Any"
                        },
                        new
                        {
                            RuleId = 2,
                            Rules = "All"
                        });
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Helptext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RuleCount")
                        .HasColumnType("int");

                    b.Property<int?>("RuleId")
                        .HasColumnType("int");

                    b.Property<int>("SectionNo")
                        .HasColumnType("int");

                    b.Property<int>("SectionTypeId")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.HasIndex("RuleId");

                    b.HasIndex("SectionTypeId");

                    b.ToTable("Sections","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.SectionFieldMapping", b =>
                {
                    b.Property<Guid>("SectionFieldMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FieldNo")
                        .HasColumnType("int");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("SectionFieldMappingId");

                    b.HasIndex("FieldId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionFieldMappings","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.SectionType", b =>
                {
                    b.Property<int>("SectionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SectionTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionTypeId");

                    b.ToTable("SectionTypes","forms");

                    b.HasData(
                        new
                        {
                            SectionTypeId = 1,
                            SectionTypes = "Main-Fields"
                        },
                        new
                        {
                            SectionTypeId = 2,
                            SectionTypes = "Main-Table"
                        },
                        new
                        {
                            SectionTypeId = 3,
                            SectionTypes = "Sub-Fields"
                        },
                        new
                        {
                            SectionTypeId = 4,
                            SectionTypes = "Sub-Table"
                        });
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Statuses", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status","forms");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Status = "Draft"
                        },
                        new
                        {
                            StatusId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            StatusId = 3,
                            Status = "Legacy"
                        });
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Taxonomy", b =>
                {
                    b.Property<Guid>("TaxonomyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QsNo")
                        .HasColumnType("int");

                    b.Property<string>("QsVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxonomyDictionary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tenant")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaxonomyID");

                    b.ToTable("Taxonomy","forms");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Sessions.QSCollection", b =>
                {
                    b.Property<Guid>("QSCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationTypeRefNo")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QSCollectionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("QSCollectionVersion")
                        .HasColumnType("float");

                    b.Property<string>("RefNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QSCollectionId");

                    b.HasIndex("QSCollectionTypeId");

                    b.ToTable("QSCollections","sessions");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Sessions.Qsr", b =>
                {
                    b.Property<Guid>("QsrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QSCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QSNo")
                        .HasColumnType("int");

                    b.Property<string>("QSVersion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QsrId");

                    b.HasIndex("QSCollectionId");

                    b.HasIndex("QSId");

                    b.ToTable("QSR","sessions");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Sessions.QsrAnswer", b =>
                {
                    b.Property<Guid>("QsrAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FieldNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QsrId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("QsrAnswerId");

                    b.HasIndex("FieldId");

                    b.HasIndex("QsrId");

                    b.ToTable("QSRAnswers","sessions");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.AnswerGuide", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.AnswerType", "AnswerTypes")
                        .WithMany()
                        .HasForeignKey("AnswerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Field", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Rule", "Rule")
                        .WithMany()
                        .HasForeignKey("AnswerRuleId");

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Rule", "Rules")
                        .WithMany()
                        .HasForeignKey("ConstraintRuleId");

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Constraint", "Constraint")
                        .WithMany()
                        .HasForeignKey("DisplayConstraintId");

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Display", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId");

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.FieldAggregation", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.FieldConstraint", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.QS", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.QSType", "QSType")
                        .WithMany()
                        .HasForeignKey("QSTypeId");

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.QSCollectionMapping", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.QSCollectionType", "QSCollectionType")
                        .WithMany()
                        .HasForeignKey("QSCollectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.QS", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.QSSectionMapping", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.QS", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.Section", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Rule", "Rules")
                        .WithMany()
                        .HasForeignKey("RuleId");

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.SectionType", "SectionType")
                        .WithMany()
                        .HasForeignKey("SectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Forms.SectionFieldMapping", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Sessions.QSCollection", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.QSCollectionType", "QSCollectionType")
                        .WithMany()
                        .HasForeignKey("QSCollectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Sessions.Qsr", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Sessions.QSCollection", "QSCollection")
                        .WithMany()
                        .HasForeignKey("QSCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.QS", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Data.FormEngine.Schemas.Sessions.QsrAnswer", b =>
                {
                    b.HasOne("TQ.Data.FormEngine.Schemas.Forms.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TQ.Data.FormEngine.Schemas.Sessions.Qsr", "Qsr")
                        .WithMany()
                        .HasForeignKey("QsrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
